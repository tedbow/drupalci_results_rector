diff --git a/sign_for_acknowledgement.module b/sign_for_acknowledgement.module
index 426caa4..0fb2538 100644
--- a/sign_for_acknowledgement.module
+++ b/sign_for_acknowledgement.module
@@ -1,5 +1,6 @@
 <?php
 
+use Drupal\Core\Entity\Entity\EntityViewDisplay;
 use Drupal\Core\Url;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Link;
@@ -54,7 +55,7 @@ function sign_for_acknowledgement_theme() {
  * Implements hook_node_view
  *
  **/
-function sign_for_acknowledgement_node_view(array &$build, Drupal\Core\Entity\EntityInterface $node, Drupal\Core\Entity\Entity\EntityViewDisplay  $display, $view_mode) {
+function sign_for_acknowledgement_node_view(array &$build, EntityInterface $node, EntityViewDisplay  $display, $view_mode) {
   $config = \Drupal::config('sign_for_acknowledgement.settings');
   $fieldman = \Drupal::service('sign_for_acknowledgement.field_manager');
   $dbman = \Drupal::service('sign_for_acknowledgement.db_manager');
@@ -132,7 +133,7 @@ function sign_for_acknowledgement_node_view(array &$build, Drupal\Core\Entity\En
       ];
 	  
     $msg = t('<strong>Please, remember to sign for acknowledgement.</strong>');
-    drupal_set_message($msg, 'warning', TRUE);
+    \Drupal::messenger()->addWarning($msg, TRUE);
 
   }
 
@@ -393,4 +394,3 @@ function sign_for_acknowledgement_partial($expired, $signed)
     }
   }
 }
-
diff --git a/sign_for_acknowledgement.views.inc b/sign_for_acknowledgement.views.inc
index 85c4681..1eeadef 100644
--- a/sign_for_acknowledgement.views.inc
+++ b/sign_for_acknowledgement.views.inc
@@ -114,4 +114,3 @@ function sign_for_acknowledgement_views_data() {
 
   return $data;
 }
-
diff --git a/src/Access/NodeTypeAccessCheck.php b/src/Access/NodeTypeAccessCheck.php
index 31585d6..7f13bc3 100644
--- a/src/Access/NodeTypeAccessCheck.php
+++ b/src/Access/NodeTypeAccessCheck.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sign_for_acknowledgement\Access;
 
+use Drupal\node\Entity\Node;
 use Drupal\Core\Access\AccessCheckInterface;
 use Drupal\Core\Access\AccessResult;
 use Drupal\node\NodeInterface;
@@ -26,8 +27,8 @@ class NodeTypeAccessCheck implements AccessCheckInterface {
    *   Run access checks for this node.
    */
   public function access(Route $route,  $node) {
-    $node =  \Drupal\node\Entity\Node::load($node);
+    $node =  Node::load($node);
     $fieldman = \Drupal::service('sign_for_acknowledgement.field_manager');
     return $fieldman->appliesToBundle($node->bundle())? AccessResult::allowed() : AccessResult::forbidden();
   }
-}
+}
diff --git a/src/Controller/AcknowledgementsController.php b/src/Controller/AcknowledgementsController.php
index 53d8d61..dc3e900 100644
--- a/src/Controller/AcknowledgementsController.php
+++ b/src/Controller/AcknowledgementsController.php
@@ -32,4 +32,4 @@ class AcknowledgementsController extends ControllerBase implements ContainerInje
     return $build;
   }
 
-}
+}
diff --git a/src/Form/AdminSettingsForm.php b/src/Form/AdminSettingsForm.php
index 908f139..efd9fca 100644
--- a/src/Form/AdminSettingsForm.php
+++ b/src/Form/AdminSettingsForm.php
@@ -144,7 +144,7 @@ class AdminSettingsForm extends ConfigFormBase {
     '#title' => $this->t('Fields to be shown in the table'),
   );
   $my_fields = array(); //'' => $this->t('No field'));
-  $field_map = \Drupal::entityManager()->getFieldMap();
+  $field_map = \Drupal::service('entity_field.manager')->getFieldMap();
   $fields = $field_map['user'];
   foreach ($fields as $name => $field) {
     if (isset($field['bundles']['user']) && !empty($field['bundles']['user'])) {
@@ -298,4 +298,4 @@ class AdminSettingsForm extends ConfigFormBase {
     $dbman->clearRenderCache();
   }
 
-}
+}
diff --git a/src/Form/AlternateForm.php b/src/Form/AlternateForm.php
index 83c8263..ad3a78e 100644
--- a/src/Form/AlternateForm.php
+++ b/src/Form/AlternateForm.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\sign_for_acknowledgement\Form;
 
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Component\Utility\Xss;
 use Drupal\Core\Form\FormBase;
 
 /**
@@ -19,7 +21,7 @@ class AlternateForm extends FormBase {
   /**
    * {@inheritdoc}
    */
-  public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state, $node = NULL) {
+  public function buildForm(array $form, FormStateInterface $form_state, $node = NULL) {
     $user =  \Drupal::currentUser();
 	
     $form['user'] = array(
@@ -54,7 +56,7 @@ class AlternateForm extends FormBase {
     $labels = explode( "\n", $labels);//$node->get('alternate_form_text')->getValue();
     $options = array();
     foreach ($labels as $label) {
-      $val = \Drupal\Component\Utility\Xss::filter($label);
+      $val = Xss::filter($label);
       if (empty(trim($val))) {
           continue;
       }
@@ -77,7 +79,7 @@ class AlternateForm extends FormBase {
   /**
    * {@inheritdoc}
    */
-  public function submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+  public function submitForm(array &$form, FormStateInterface $form_state) {
     $dbman = \Drupal::service('sign_for_acknowledgement.db_manager');
     $userid = $form_state->getValue('user');
     $nodeid = $form_state->getValue('node');
@@ -99,7 +101,7 @@ class AlternateForm extends FormBase {
     }
     $annotation = $form_state->getValue('annotation');
     if ($dbman->alternateSignDocument($userid, $nodeid, $selection, $annotation)) {
-      drupal_set_message(t('Document has been signed.'));
+      $this->messenger()->addStatus(t('Document has been signed.'));
     }
   }
-}
+}
diff --git a/src/Form/CheckboxForm.php b/src/Form/CheckboxForm.php
index a9ea1ce..32e81d3 100644
--- a/src/Form/CheckboxForm.php
+++ b/src/Form/CheckboxForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sign_for_acknowledgement\Form;
 
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\FormBase;
 
 /**
@@ -19,7 +20,7 @@ class CheckboxForm extends FormBase {
   /**
    * {@inheritdoc}
    */
-  public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state, $submit = FALSE, $node = NULL) {
+  public function buildForm(array $form, FormStateInterface $form_state, $submit = FALSE, $node = NULL) {
     $user =  \Drupal::currentUser();
 	
     $form['user'] = array(
@@ -67,18 +68,18 @@ class CheckboxForm extends FormBase {
   /**
    * {@inheritdoc}
    */
-  public function submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+  public function submitForm(array &$form, FormStateInterface $form_state) {
     $dbman = \Drupal::service('sign_for_acknowledgement.db_manager');
     $userid = $form_state->getValue('user');
     $nodeid = $form_state->getValue('node');
     $checked = $form_state->getValue('signature');
     $annotation = $form_state->getValue('annotation');
     if (!$checked) {
-      drupal_set_message(t('Data not saved, please select the checkbox first.'),'warning');
+      $this->messenger()->addWarning(t('Data not saved, please select the checkbox first.'));
       return;
     }
     if ($dbman->signDocument($userid, $nodeid, $annotation)) {
-      drupal_set_message(t('Document has been signed.'));
+      $this->messenger()->addStatus(t('Document has been signed.'));
     }
   }
-}
+}
diff --git a/src/Form/FilterForm.php b/src/Form/FilterForm.php
index f670cc3..0f3181a 100644
--- a/src/Form/FilterForm.php
+++ b/src/Form/FilterForm.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\sign_for_acknowledgement\Form;
 
+use Drupal\Component\Utility\Xss;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\node\Entity\Node;
 use Drupal\Core\Form\FormBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 use Drupal\sign_for_acknowledgement\Service\AcknowledgementsDatabase;
@@ -72,7 +75,7 @@ public static function filters($node) {
     $options = array('any' => t('any'));
 	$first_key = FALSE;
 	foreach ($labels as $label) {
-	  $val = \Drupal\Component\Utility\Xss::filter($label);
+	  $val = Xss::filter($label);
 	  if (empty(trim($val))) {
         continue;
 	  }
@@ -123,7 +126,7 @@ public static function filters($node) {
   /**
    * {@inheritdoc}
    */
-public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state, $node = NULL) {
+public function buildForm(array $form, FormStateInterface $form_state, $node = NULL) {
   $session_name = self::sessionName($node);
   $session = isset($_SESSION[$session_name]) ? $_SESSION[$session_name] : array();
   $filters = self::filters($node);
@@ -183,11 +186,11 @@ public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $for
 
   return $form;
 }
-  public function submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+  public function submitForm(array &$form, FormStateInterface $form_state) {
 	  //echo $form_state->getValue('export').'='.$_POST['submit'] ;exit;
   }
-  public static function submitFilter(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
-    $node =  \Drupal\node\Entity\Node::load($form_state->getValue('node'));
+  public static function submitFilter(array &$form, FormStateInterface $form_state) {
+    $node =  Node::load($form_state->getValue('node'));
 	$filters = self::filters($node);
 	$session_name = self::sessionName($node);
     foreach ($filters as $filter => $options) {
@@ -201,17 +204,17 @@ public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $for
       }
     }
   }
-  public static function submitReset(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
-    $node =  \Drupal\node\Entity\Node::load($form_state->getValue('node'));
+  public static function submitReset(array &$form, FormStateInterface $form_state) {
+    $node =  Node::load($form_state->getValue('node'));
 	$filters = self::filters($node);
 	$session_name = self::sessionName($node);
     foreach ($filters as $filter => $options) {
       $_SESSION[$session_name][$filter] = 'any';
     }
   }
-  public static function submitCsv(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+  public static function submitCsv(array &$form, FormStateInterface $form_state) {
     $config = \Drupal::config('sign_for_acknowledgement.settings');
-    $node =  \Drupal\node\Entity\Node::load($form_state->getValue('node'));
+    $node =  Node::load($form_state->getValue('node'));
     $session_name = self::sessionName($node);
     $dbman = \Drupal::service('sign_for_acknowledgement.db_manager');
     $fieldman = \Drupal::service('sign_for_acknowledgement.field_manager');
@@ -270,4 +273,4 @@ public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $for
     preg_replace  ("/[^0-9^a-z^_^.]/", "", $string);
     return $string;
   }
-}
+}
diff --git a/src/Form/TableForm.php b/src/Form/TableForm.php
index f2bf2af..7ac6c56 100644
--- a/src/Form/TableForm.php
+++ b/src/Form/TableForm.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sign_for_acknowledgement\Form;
 
+use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Form\FormBase;
 use Symfony\Component\DependencyInjection\ContainerInterface;
 
@@ -34,7 +35,7 @@ class TableForm extends FormBase {
     return 'sign_for_acknowledgement_table_form';
   }
 
-  public function buildForm(array $form, \Drupal\Core\Form\FormStateInterface $form_state, $node = NULL) {
+  public function buildForm(array $form, FormStateInterface $form_state, $node = NULL) {
     $session_name = FilterForm::sessionName($node);
     $session = isset($_SESSION[$session_name]) ? $_SESSION[$session_name] : array();
     $dbman = \Drupal::service('sign_for_acknowledgement.db_manager');
@@ -89,7 +90,7 @@ class TableForm extends FormBase {
     return $form;
   }
   
-public function submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+public function submitForm(array &$form, FormStateInterface $form_state) {
   $dbman = \Drupal::service('sign_for_acknowledgement.db_manager');
   $items = $form_state->getValue('myselector');
   $nodeid = $form_state->getValue('node');
@@ -102,7 +103,7 @@ public function submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $f
   $dbman->clearRenderCache();
  }
  
-public static function sign_submitForm(array &$form, \Drupal\Core\Form\FormStateInterface $form_state) {
+public static function sign_submitForm(array &$form, FormStateInterface $form_state) {
   $dbman = \Drupal::service('sign_for_acknowledgement.db_manager');
   $items = $form_state->getValue('myselector');
   $nodeid = $form_state->getValue('node');
@@ -114,4 +115,4 @@ public static function sign_submitForm(array &$form, \Drupal\Core\Form\FormState
   }
   $dbman->clearRenderCache();
  }
-}
+}
diff --git a/src/Plugin/views/argument/UserArgument.php b/src/Plugin/views/argument/UserArgument.php
index 152b5c2..342313c 100644
--- a/src/Plugin/views/argument/UserArgument.php
+++ b/src/Plugin/views/argument/UserArgument.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sign_for_acknowledgement\Plugin\views\argument;
 
+use Drupal\user\Entity\User;
 use Drupal\views\Plugin\views\argument\NumericArgument;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Plugin\Context\ContextDefinition;
@@ -66,7 +67,7 @@ class UserArgument extends NumericArgument {
     $info['join']->extra[0]['numeric'] = TRUE;
     $info['join']->extra[0]['field'] = 'user_id';
 
-    $usr = \Drupal\user\Entity\User::load($val);
+    $usr = User::load($val);
 	if (empty($usr)) {
 	  $this->query->addWhereExpression(0, '1 = 0'); // remove rows
       return;
diff --git a/src/Plugin/views/field/SfaStatus.php b/src/Plugin/views/field/SfaStatus.php
index ca2a3f0..a7ac438 100644
--- a/src/Plugin/views/field/SfaStatus.php
+++ b/src/Plugin/views/field/SfaStatus.php
@@ -84,4 +84,4 @@ class SfaStatus extends FieldPluginBase {
 	  return $status? $status : '---'; 
   }
 
-}
+}
diff --git a/src/Plugin/views/field/User.php b/src/Plugin/views/field/User.php
index e382b47..68aecdd 100644
--- a/src/Plugin/views/field/User.php
+++ b/src/Plugin/views/field/User.php
@@ -49,4 +49,4 @@ class User extends NumericField {
     return '---';
   }
 
-}
+}
diff --git a/src/Plugin/views/filter/StatusFilter.php b/src/Plugin/views/filter/StatusFilter.php
index 68e0fca..249bed6 100644
--- a/src/Plugin/views/filter/StatusFilter.php
+++ b/src/Plugin/views/filter/StatusFilter.php
@@ -2,6 +2,7 @@
 
 namespace Drupal\sign_for_acknowledgement\Plugin\views\filter;
 
+use Drupal\views\Plugin\views\filter\FilterPluginBase;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Connection;
@@ -15,7 +16,7 @@ use Drupal\Core\Cache\Cache;
  *
  * @ViewsFilter("sfa_status")
  */
-class StatusFilter extends \Drupal\views\Plugin\views\filter\FilterPluginBase {
+class StatusFilter extends FilterPluginBase {
 
   /**
    * {@inheritdoc}
diff --git a/src/Plugin/views/filter/UserFilter.php b/src/Plugin/views/filter/UserFilter.php
index 77b7046..7ca1350 100644
--- a/src/Plugin/views/filter/UserFilter.php
+++ b/src/Plugin/views/filter/UserFilter.php
@@ -2,6 +2,8 @@
 
 namespace Drupal\sign_for_acknowledgement\Plugin\views\filter;
 
+use Drupal\views\Plugin\views\filter\FilterPluginBase;
+use Drupal\user\Entity\User;
 use Drupal\Core\Form\FormStateInterface;
 use Drupal\Core\Database\Database;
 use Drupal\Core\Database\Connection;
@@ -15,7 +17,7 @@ use Drupal\Core\Cache\Cache;
  *
  * @ViewsFilter("sfa_user")
  */
-class UserFilter extends \Drupal\views\Plugin\views\filter\FilterPluginBase {
+class UserFilter extends FilterPluginBase {
 
   /**
    * {@inheritdoc}
@@ -107,7 +109,7 @@ class UserFilter extends \Drupal\views\Plugin\views\filter\FilterPluginBase {
     if ($val == '***CURRENT_USER***') {
         $val = \Drupal::currentUser()->id();
     }
-    $usr = \Drupal\user\Entity\User::load($val);
+    $usr = User::load($val);
     if (empty($usr)) {
       $this->query->addWhereExpression(0, '1 = 0'); // remove rows
         return;
diff --git a/src/Service/AcknowledgementsDatabase.php b/src/Service/AcknowledgementsDatabase.php
index 9db193e..cc87fd9 100644
--- a/src/Service/AcknowledgementsDatabase.php
+++ b/src/Service/AcknowledgementsDatabase.php
@@ -431,4 +431,4 @@ class AcknowledgementsDatabase {
       $rows[$record->uid]['status'] = $this->status($timestamp, $record->mydate);
     }
   }
-}
+}
diff --git a/src/Service/AcknowledgementsEmails.php b/src/Service/AcknowledgementsEmails.php
index 57b89cf..d49a376 100644
--- a/src/Service/AcknowledgementsEmails.php
+++ b/src/Service/AcknowledgementsEmails.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\sign_for_acknowledgement\Service;
 
+use Drupal\user\Entity\User;
+use Drupal\node\Entity\Node;
+use Drupal\Component\Utility\Html;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\Entity\Entity;
@@ -69,7 +72,7 @@ class AcknowledgementsEmails {
    * build to string with users emails
    */
   public function buildReceivers($uids) {
-    $users = \Drupal\user\Entity\User::loadMultiple($uids);
+    $users = User::loadMultiple($uids);
     $result = '';
     foreach ($users as $user) {
       if ($user->get('status')->value == 0) {
@@ -129,7 +132,7 @@ class AcknowledgementsEmails {
   /**
    * Send email
    */
-  public function nodeEmail(\Drupal\node\Entity\Node $node, $roles, $users, $nosign) {
+  public function nodeEmail(Node $node, $roles, $users, $nosign) {
     $no_signature = FALSE;
 	  $emails = [];
 	  if ($node->email_roles->value && is_array($roles)) {
@@ -151,13 +154,13 @@ class AcknowledgementsEmails {
 	  $mailManager = \Drupal::service('plugin.manager.mail');
 	  $tokenManager = \Drupal::token();
     $params = array();
-    $params['subject'] = $tokenManager->replace(\Drupal\Component\Utility\Html::escape($this->config->get($no_signature? 'email_subject_nosign' : 'email_subject')), array('node' => $node));
-    $params['body'] = $tokenManager->replace(\Drupal\Component\Utility\Html::escape($this->config->get($no_signature? 'email_body_nosign' : 'email_body')), array('node' => $node));
+    $params['subject'] = $tokenManager->replace(Html::escape($this->config->get($no_signature? 'email_subject_nosign' : 'email_subject')), array('node' => $node));
+    $params['body'] = $tokenManager->replace(Html::escape($this->config->get($no_signature? 'email_body_nosign' : 'email_body')), array('node' => $node));
     $params['headers'] = array('Bcc' => $this->buildReceivers($emails));
     $site_mail = \Drupal::config('system.site')->get('mail');
     $to = $this->config->get('email_to') == 1 ? $site_mail : 'undisclosed-recipients:;';
     $mailManager->mail('sign_for_acknowledgement', 'notify', $to, \Drupal::languageManager()->getDefaultLanguage()->getId(), $params);
     $this->saveEmailSent($emails, $node->id());
-    drupal_set_message(t('Selected users have been notified via e-mail'));
+    \Drupal::messenger()->addStatus(t('Selected users have been notified via e-mail'));
   }
-}
+}
diff --git a/src/Service/AcknowledgementsNodeFields.php b/src/Service/AcknowledgementsNodeFields.php
index 90a88d2..cd491c3 100644
--- a/src/Service/AcknowledgementsNodeFields.php
+++ b/src/Service/AcknowledgementsNodeFields.php
@@ -2,6 +2,9 @@
 
 namespace Drupal\sign_for_acknowledgement\Service;
 
+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\Url;
+use Drupal\node\Entity\Node;
 use Drupal\Core\Config\ConfigFactoryInterface;
 use Drupal\Core\Site\Settings;
 use Drupal\Core\Entity\Entity;
@@ -65,7 +68,7 @@ class AcknowledgementsNodeFields {
 
 	if ((isset($my_roles) == FALSE || count($my_roles) == 0) && !$single_user_enabled) {
       if (\Drupal::service('path.matcher')->isFrontPage() == FALSE && $this->config->get('show_nobody')) {
-        drupal_set_message(t('Nobody can sign this content for acknowledgement.<br />If this is unwanted, please modify the content and set up users roles.'), 'warning', TRUE);
+        \Drupal::messenger()->addWarning(t('Nobody can sign this content for acknowledgement.<br />If this is unwanted, please modify the content and set up users roles.'), TRUE);
       }
 	  return FALSE;
 	}
@@ -147,7 +150,7 @@ class AcknowledgementsNodeFields {
   $defs = array();
   // Check if our field is not already created.
   if (!\Drupal::config('field.storage.node.'.$name)->get()) {
-	$field_storage = \Drupal\field\Entity\FieldStorageConfig::create(array(
+	$field_storage = FieldStorageConfig::create(array(
       'field_name' => $name,
       'entity_type' => 'node',
       'type' => $type,
@@ -176,7 +179,7 @@ class AcknowledgementsNodeFields {
         'label' => $label, 
         'bundle' => $bundle, 
       );
-	  \Drupal\field\Entity\FieldConfig::create($instance)->save();
+	  FieldConfig::create($instance)->save();
 	  $this->getFormDisplay('node', $bundle)
         ->setComponent($name, array(
         'type' => $form_type,
@@ -293,7 +296,7 @@ class AcknowledgementsNodeFields {
  */
   public function expirationDate($timestamp = FALSE, $nodeid = 0, $node = NULL)
     {
-    $current_url = \Drupal\Core\Url::fromRoute('<current>');
+    $current_url = Url::fromRoute('<current>');
     $path = $current_url->getInternalPath();
     $arg = explode('/', $path);
 //	echo "<pre>";print_r($param);exit;
@@ -302,7 +305,7 @@ class AcknowledgementsNodeFields {
         $nodeid = $arg[1];
       }
       if ($node == NULL) {
-        $node = \Drupal\node\Entity\Node::load($nodeid);
+        $node = Node::load($nodeid);
       }
       if ($node == NULL) {
         return NULL;
@@ -327,5 +330,4 @@ class AcknowledgementsNodeFields {
       return NULL;
     }
   }
-}
-
+}
