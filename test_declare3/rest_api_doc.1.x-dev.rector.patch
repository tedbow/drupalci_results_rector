diff --git a/src/Controller/RestApiDocController.php b/src/Controller/RestApiDocController.php
index 091d964..308a894 100644
--- a/src/Controller/RestApiDocController.php
+++ b/src/Controller/RestApiDocController.php
@@ -7,6 +7,7 @@
 
 namespace Drupal\rest_api_doc\Controller;
 
+use Drupal\Core\Link;
 use Drupal\Component\Utility\Xss;
 use Drupal\Core\Config\Config;
 use Drupal\Core\Controller\ControllerBase;
@@ -112,7 +113,7 @@ class RestApiDocController extends ControllerBase implements ContainerInjectionI
       );
       if ($this->currentUser()->hasPermission('administer rest_api_doc')) {
         $return['#markup'] .= ' ' . $this->t('Please !link routes used for REST API documentation.', array(
-          '!link' => $this->l($this->t('configure'), Url::fromRoute('rest_api_doc.settings')),
+          '!link' => Link::fromTextAndUrl($this->t('configure'), Url::fromRoute('rest_api_doc.settings')),
         ));;
       }
       return $return;
@@ -126,7 +127,7 @@ class RestApiDocController extends ControllerBase implements ContainerInjectionI
     $routes = $this->routeProvider->getRoutesByNames($route_names);
     foreach ($routes as $route_name => $route) {
       $path = $route->getPath();
-      $links[$path] = $this->l($path, Url::fromRoute('rest_api_doc.documentation_detail', array(
+      $links[$path] = Link::fromTextAndUrl($path, Url::fromRoute('rest_api_doc.documentation_detail', array(
         'path' => str_replace('/', '::', $path),
       )));
     }
@@ -224,9 +225,9 @@ class RestApiDocController extends ControllerBase implements ContainerInjectionI
             continue;
           }
           list(, $entity_type_id) = explode(':', $type);
-          $entity_type = $this->entityManager()->getDefinition($entity_type_id);
+          $entity_type = \Drupal::service('entity_type.manager')->getDefinition($entity_type_id);
           $id_field_name = $entity_type->getKey('id');
-          $base_fields = $this->entityManager()->getBaseFieldDefinitions($entity_type_id);
+          $base_fields = \Drupal::service('entity_field.manager')->getBaseFieldDefinitions($entity_type_id);
           $id_field = $base_fields[$id_field_name];
           $row = array(
             $name,
@@ -260,7 +261,7 @@ class RestApiDocController extends ControllerBase implements ContainerInjectionI
             );
             $return[$route_name]['detail']['#rows'][] = $row;
           }
-          $bundle_info = $this->entityManager()->getBundleInfo($entity_type_id);
+          $bundle_info = \Drupal::service('entity_type.bundle.info')->getBundleInfo($entity_type_id);
           if (count($bundle_info) > 1) {
             // Multiple bundles.
             foreach (array_keys($bundle_info) as $bundle) {
@@ -278,7 +279,7 @@ class RestApiDocController extends ControllerBase implements ContainerInjectionI
                 ),
               );
               $return[$route_name]['detail']['#rows'][] = $row;
-              $field_definitions = $this->entityManager()->getFieldDefinitions($entity_type_id, $bundle);
+              $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, $bundle);
               foreach ($field_definitions as $field_name => $field) {
                 if (!empty($base_fields[$field_name])) {
                   continue;
@@ -297,7 +298,7 @@ class RestApiDocController extends ControllerBase implements ContainerInjectionI
             // Single bundle.
             $bundle_keys = array_keys($bundle_info);
             $bundle = array_shift($bundle_keys);
-            $field_definitions = $this->entityManager()->getFieldDefinitions($entity_type_id, $bundle);
+            $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($entity_type_id, $bundle);
             foreach ($field_definitions as $field_name => $field) {
               if (!empty($base_fields[$field_name])) {
                 continue;
@@ -319,7 +320,7 @@ class RestApiDocController extends ControllerBase implements ContainerInjectionI
       throw new NotFoundHttpException();
     }
     $return['link'] = array(
-      '#markup' => $this->l($this->t('Back to overview'), Url::fromRoute('rest_api_doc.documentation_summary')),
+      '#markup' => Link::fromTextAndUrl($this->t('Back to overview'), Url::fromRoute('rest_api_doc.documentation_summary')),
     );
 
     return $return;
